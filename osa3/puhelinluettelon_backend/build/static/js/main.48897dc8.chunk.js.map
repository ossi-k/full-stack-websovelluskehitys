{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","App","useState","name","number","persons","setPersons","newName","setNewName","newNumber","setNewNumber","useEffect","personService","initialPersons","console","log","length","onSubmit","event","preventDefault","personObject","duplicate","find","person","includes","duplicateID","window","confirm","put","location","reload","returnedPerson","concat","value","onChange","target","type","map","key","onClick","newPersons","filter","item","removePerson","Boolean","hostname","match","promise","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uPACMA,EAAU,gCAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EALA,SAACG,GAEZ,OADgBP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCsF9BK,EAtGH,WAAO,IAAD,EACcC,mBAAS,CACrC,CACEC,KAAM,cACNC,OAAQ,iBAJI,mBACTC,EADS,KACAC,EADA,OAQcJ,mBAAS,IARvB,mBAQTK,EARS,KAQAC,EARA,OASkBN,mBAAS,IAT3B,mBASTO,EATS,KASEC,EATF,KAWhBC,qBAAU,WACRC,IAEGlB,MAAK,SAAAmB,GACJP,EAAWO,QACR,IAETC,QAAQC,IAAI,SAAUV,EAAQW,OAAQ,WAiDtC,OACE,6BACE,yCACA,0BAAMC,SAlDQ,SAACC,GAEjBA,EAAMC,iBACN,IAAMC,EAAe,CACnBjB,KAAMI,EACNH,OAAQK,GAGJY,EAAYhB,EAAQiB,MAAK,SAAAC,GAAM,OAAIH,EAAajB,OAASoB,EAAOpB,QAEtE,GAAIE,EAAQmB,SAASH,GAAY,CAE/B,IAAII,EAAcJ,EAAUtB,GACxB2B,OAAOC,QAAP,UAAkBN,EAAUlB,KAA5B,iFACFX,IACGoC,IADH,wCACwCH,GAAeL,GACrDM,OAAOG,SAASC,eAGpBlB,EACUQ,GACP1B,MAAK,SAAAqC,GACJzB,EAAWD,EAAQ2B,OAAOD,SA6B5B,sCACQ,2BAAOE,MAAO1B,EAClB2B,SAfiB,SAAChB,GAC1BV,EAAWU,EAAMiB,OAAOF,WAiBpB,wCAAa,2BAAOA,MAAOxB,EACzByB,SAfmB,SAAChB,GAC1BR,EAAaQ,EAAMiB,OAAOF,WAiBtB,6BACE,4BAAQG,KAAK,UAAb,SAGJ,uCACA,2BACG/B,EAAQgC,KAAI,SAAAd,GAAM,OACjB,uBAAGe,IAAKf,EAAOpB,MACZoB,EAAOpB,KADV,KACkB,IACfoB,EAAOnB,OAFV,KAEoB,IAClB,4BAAQgC,KAAK,SAASG,QAAW,kBA3CtB,SAACpC,GAEpB,GAAGuB,OAAOC,QAAP,iBAAyBxB,EAAzB,MAAmC,CACpC,IAAMqC,EAAanC,EAAQoC,QAAO,SAACC,GAAD,OAAUA,EAAKvC,OAASA,KACtDJ,EAAKM,EAAQiB,MAAK,SAACoB,GAAD,OAAUA,EAAKvC,OAASA,KAAMJ,GACpDO,EAAWkC,GAEX5B,EAAqBb,IAoCwB4C,CAAapB,EAAOpB,QAA3D,UAGA,oCCrFQyC,QACW,cAA7BlB,OAAOG,SAASgB,UAEe,UAA7BnB,OAAOG,SAASgB,UAEhBnB,OAAOG,SAASgB,SAASC,MACvB,2DCXN,IAAMC,EAAUvD,IAAMC,IAAI,iCAC1BqB,QAAQC,IAAIgC,GAEZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.48897dc8.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    remove: remove\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport personService from './services/persons'\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([\r\n    {\r\n      name: 'Arto Hellas',\r\n      number: '040-1231244'\r\n    }\r\n  ])\r\n\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })}, [])\r\n\r\n  console.log('render', persons.length, 'persons')\r\n\r\n  const addPerson = (event) => {\r\n\r\n    event.preventDefault()\r\n    const personObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n\r\n    const duplicate = persons.find(person => personObject.name === person.name)\r\n\r\n    if (persons.includes(duplicate)) {\r\n      // window.alert(`${newName} is already added to phonebook`)\r\n      let duplicateID = duplicate.id\r\n      if (window.confirm(`${duplicate.name} is already added to the phonebook, replace the old number with a new one?`)) {\r\n        axios\r\n          .put(`http://localhost:3001/persons/${duplicateID}`, personObject)\r\n          window.location.reload()\r\n      }\r\n    } else {\r\n      personService\r\n        .create(personObject)\r\n        .then(returnedPerson => {\r\n          setPersons(persons.concat(returnedPerson))\r\n        })\r\n    }\r\n  }\r\n\r\n  const removePerson = (name) => {\r\n\r\n    if(window.confirm(`Delete ${name}?`)) {\r\n      const newPersons = persons.filter((item) => item.name !== name)\r\n      let id = persons.find((item) => item.name === name).id\r\n      setPersons(newPersons)\r\n\r\n      personService.remove(id)\r\n    }\r\n  }\r\n\r\n  const handlePersonChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <form onSubmit={addPerson}>\r\n        <div>\r\n          name: <input value={newName}\r\n            onChange={handlePersonChange}\r\n          />\r\n        </div>\r\n        <div>number: <input value={newNumber}\r\n          onChange={handleNumberChange}\r\n        />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      <h2>Numbers</h2>\r\n      <a>\r\n        {persons.map(person =>\r\n          <a key={person.name}>\r\n            {person.name}, {\" \"}\r\n            {person.number}, {\" \"}\r\n            <button type=\"button\" onClick ={ () => removePerson(person.name)}>\r\n              remove\r\n            </button>\r\n            <br/>\r\n          </a>\r\n        )}\r\n      </a>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport axios from 'axios';\r\n\r\nconst promise = axios.get('http://localhost:3001/persons')\r\nconsole.log(promise)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}